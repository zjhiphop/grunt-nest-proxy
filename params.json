{"name":"grunt-nest-proxy","tagline":"Like grunt-connect-proxy, but nested and simpler","body":"# grunt-nest-proxy\r\n\r\n> Like grunt-connect-proxy, but nested and simpler\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.0`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-nest-proxy --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-nest-proxy');\r\n```\r\n\r\n## The \"nest_proxy\" task\r\n\r\n### Overview\r\n\r\n#### Basic Usage\r\nIn your project's Gruntfile, add a section named `nest_proxy` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n   connect: {\r\n        options: {\r\n            port: 9000,\r\n            // change this to '0.0.0.0' to access the server from outside\r\n            hostname: 'localhost'\r\n        },\r\n        proxies: [{\r\n            context: '/api/v1',\r\n            host: 'yourserver.com',\r\n            port: 80,\r\n            proto: 'http'\r\n        }]\r\n   }   \r\n});\r\n```\r\n\r\n### Options\r\nThe available configuration options from a given proxy are generally the same as what is provided by the underlying [request](https://github.com/mikeal/request) library.\r\n\r\n#### options.context\r\nType: `String` or `Array`\r\nDefault value: ``\r\n\r\nThe `context` to match requests URL. Matched requests will be proxied. Every url should be start with '/' and not end of '/'. Such as: ['/api/v1', '/api/v2'].\r\n\r\n#### options.host\r\nType: `String`\r\nDefault value: `localhost`\r\n\r\nThe `host` is proxy server's hostname.\r\n\r\n#### options.port\r\nType: `Number`\r\nDefault value: `80`\r\n\r\nThe `port` is proxy server's port number\r\n\r\n#### options.proto\r\nType: `String`\r\nDefault Value: `http`\r\n\r\nThe `proto` is proxy server's http protocol\r\n\r\n#### options.proxy\r\nType: `String`\r\nDefault Value: ``\r\n\r\nThe `proxy` is the proxy of proxy server. Meaning the request will send with this proxy at last. For example, to proxy facebook user infomation in China. As you know, the facebook is blocked in China. So it must make this request go with VPN. Like: `localhost:9000/facebook/search?userXXX -> facebook.com/search?userXXX -> VPN`.\r\n\r\n### Usage Examples\r\n\r\n#### Basic Configuration\r\nAdd new configuration named `proxies` to connect config node.\r\n\r\n```js\r\ngrunt.initConfig({\r\n   connect: {\r\n        options: {\r\n            port: 9000,\r\n            // change this to '0.0.0.0' to access the server from outside\r\n            hostname: 'localhost'\r\n        },\r\n        proxies: [{\r\n            context: '/api/v1',\r\n            host: 'yourserver.com',\r\n            port: 80,\r\n            proto: 'http'\r\n        }]\r\n   }   \r\n});\r\n```\r\n\r\n#### Adding the middleware with LiveReload  \r\n\r\n```js\r\ngrunt.initConfig({\r\n   connect: {\r\n        options: {\r\n            port: 9000,\r\n            // change this to '0.0.0.0' to access the server from outside\r\n            hostname: 'localhost'\r\n        },\r\n        proxies: [{\r\n            context: '/api/v1',\r\n            host: 'yourserver.com',\r\n            port: 80,\r\n            proto: 'http'\r\n        }],\r\n        livereload: {\r\n          options: {\r\n            middleware: function(connect, options) {\r\n                  // Setup the proxy\r\n                  return [\r\n                      require('grunt-nest-proxy/lib/proxy').request,\r\n                      lrSnippet,\r\n                      mountFolder(connect, 'tmp'),\r\n                      mountFolder(connect, 'app')\r\n                  ];\r\n              }\r\n          }\r\n       }\r\n   }   \r\n});\r\n```\r\n\r\n#### Adding the middleware without LiveReload  \r\n\r\n```js\r\ngrunt.initConfig({\r\n   connect: {\r\n        options: {\r\n            port: 9000,\r\n            // change this to '0.0.0.0' to access the server from outside\r\n            hostname: 'localhost'\r\n        },\r\n        proxies: [{\r\n            context: '/api/v1',\r\n            host: 'yourserver.com',\r\n            port: 80,\r\n            proto: 'http'\r\n        }],\r\n        server: {\r\n            options: {\r\n                middleware: function(connect) {\r\n                    return [\r\n                    \trequire('grunt-nest-proxy/lib/proxy').request,\r\n\r\n                        mountFolder(connect, 'tmp'),\r\n                        mountFolder(connect, 'test'),\r\n                        mountFolder(connect, 'app')\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n   }   \r\n});\r\n```\r\n\r\n#### Multi-server proxy configuration\r\n\r\n```js\r\ngrunt.initConfig({\r\n   connect: {\r\n        options: {\r\n            port: 9000,\r\n            // change this to '0.0.0.0' to access the server from outside\r\n            hostname: 'localhost'\r\n        },\r\n        proxies: [{\r\n            context: '/api/v1',\r\n            host: 'yourserver.com',\r\n            port: 80,\r\n            proto: 'http'\r\n        }],\r\n        server1: {\r\n            options: {\r\n                middleware: function(connect) {\r\n                    return [\r\n                    \trequire('grunt-nest-proxy/lib/proxy').request,\r\n\r\n                        mountFolder(connect, 'tmp'),\r\n                        mountFolder(connect, 'test'),\r\n                        mountFolder(connect, 'app')\r\n                    ];\r\n                }\r\n            }\r\n        },\r\n        server2: {\r\n            options: {\r\n                middleware: function(connect) {\r\n                    return [\r\n                    \trequire('grunt-nest-proxy/lib/proxy').request,\r\n\r\n                        mountFolder(connect, 'tmp'),\r\n                        mountFolder(connect, 'test'),\r\n                        mountFolder(connect, 'app')\r\n                    ];\r\n                }\r\n            }\r\n        }        \r\n   }   \r\n});\r\n\r\n\r\ngrunt.registerTask('test', function (target) {\r\n    grunt.task.run([\r\n        'nest_proxy:server2'\r\n    ]);\r\n});\r\n```\r\n\r\n#### Nested proxy\r\n\r\nProxy blocked service to GoAgent server.\r\n\r\n```js\r\ngrunt.initConfig({\r\n\t\tconnect: {\r\n            options: {\r\n                port: 9000,\r\n                // change this to '0.0.0.0' to access the server from outside\r\n                hostname: 'localhost'\r\n            },\r\n            proxies: [{\r\n                context: '/fb/search',\r\n                host: 'graph.facebook.com',\r\n                proto: \"https\",\r\n                port: 443,\r\n                proxy: \"http://localhost:8087\",\r\n                rewrite: {\r\n                    'token': 'access_token=' + fbToken,\r\n                    'fb/search': \"v2.0/search\"\r\n                }\r\n            }, {\r\n                context: '/tw/search',\r\n                host: 'api.twitter.com',\r\n                proto: \"https\",\r\n                proxy: \"http://localhost:8087\",\r\n                rewrite: {\r\n                    'tw/search': \"1.1/users/search.json\"\r\n                },\r\n                /*\r\n                   The OAuth info, you can access https://dev.twitter.com/apps/[Your-Twitter-App-Id]/oauth.\r\n                */\r\n                oauth: {\r\n                    consumer_key: CONSUMER_KEY, // Your consumer key\r\n                    consumer_secret: CONSUMER_SECRET, // Your consumer secret\r\n                    token: TOKEN, // Your access token\r\n                    token_secret: TOKEN_SECRET // Your access secret\r\n                }\r\n            }]\r\n       }\r\n });\r\n```\r\n\r\n#### Use git config to store oauth token and secret\r\n\r\nMost time, it's very bad to contains oauth token by hardcode. It's very unsafe when you publish to a public repo. So the way i think use global git config to store this info will be better.\r\n\r\n* Add new oauth config sections to git config\r\n\r\n```shell\r\n  # Twitter\r\n  git config --global --add twitter.consumer-key [Your Consumer key]\r\n  git config --global --add twitter.consumer-secret [Your Consumer secret]\r\n  git config --global --add twitter.token [Your token]\r\n  git config --global --add twitter.token-secret [Your token secret]\r\n  \r\n  #Facebook\r\n  git config --global --add facebook.token [Your facebook access token] \r\n  \r\n  # Check all configs \r\n   git config --global -l\r\n  \r\n```  \r\n* Config file\r\n```js\r\ngrunt.initConfig({\r\n\t\tconnect: {\r\n            options: {\r\n                port: 9000,\r\n                // change this to '0.0.0.0' to access the server from outside\r\n                hostname: 'localhost'\r\n            },\r\n            proxies: [{\r\n                context: '/fb/search',\r\n                host: 'graph.facebook.com',\r\n                proto: \"https\",\r\n                port: 443,\r\n                proxy: \"http://localhost:8087\",\r\n                rewrite: {\r\n                    'token': 'access_token=' + \"{{git-facebook-config.token}}\",\r\n                    'fb/search': \"v2.0/search\"\r\n                }\r\n            }, {\r\n                context: '/tw/search',\r\n                host: 'api.twitter.com',\r\n                proto: \"https\",\r\n                proxy: \"http://localhost:8087\",\r\n                rewrite: {\r\n                    'tw/search': \"1.1/users/search.json\"\r\n                },\r\n                /*\r\n                   The OAuth info, you can access https://dev.twitter.com/apps/[Your-Twitter-App-Id]/oauth.\r\n                */\r\n                oauth: \"{{git-twitter-config}}\"\r\n            }]\r\n       }\r\n });\r\n```\r\n\r\n### Adding the configureProxy task to the server task\r\n\r\nFor the server task, add the `nest_proxy` task before the connect task\r\n\r\n```js\r\n\tgrunt.registerTask('server', function(target) {\r\n        grunt.task.run([\r\n            'clean:server',\r\n            'nest_proxy',\r\n            'connect:livereload',\r\n            'open:server',\r\n            'watch'\r\n        ]);\r\n    });\r\n```\r\n\r\n## ISSUES\r\n* Not support `WebSocket` yet\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n==================\r\n* 0.0.1\r\n\t+ Support blocked service proxy\r\n\t+ Http GET request\r\n\r\n* 0.0.5\r\n    + Fix a few bugs\r\n    + Enable all HTTP request method (GET/POST/PUT/DEL/HEAD)\r\n    + fix twitter https request can not use 443 port issue\r\n    + Integrate git config support for config oauth token\r\n","google":"UA-39609141-1","note":"Don't delete this file! It's used internally to help with page regeneration."}